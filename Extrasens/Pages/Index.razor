@using Extrasens.Data;
@inject Blazored.LocalStorage.ILocalStorageService iLocalStorage
@page "/"
<div>
    <div class="extra-block">
        <div style="display:@hidden;" class="block-1">
            <h1>Тестирование экстрасенсов</h1>

            <h2>Загадайте число от 10 до 99 и нажмите на кнопку</h2>
            <button class="btn-success @dis" @onclick="RepMysе">Загадал</button>
        </div>
        <div style="display: @hidden1;" class="block-1">
            <div class="psychics">
                <div class="psychic @status[0]">
                    <h4>Экстрасенс X</h4>
                    <h4>@guessNumb[0]</h4>
                    <h4>Рейтинг: @rate[0]</h4>
                </div>
                <div class="psychic @status[1]">
                    <h4>Экстрасенс Y</h4>
                    <h4>@guessNumb[1]</h4>
                    <h4>Рейтинг: @rate[1]</h4>
                </div>
                <div class="psychic @status[2]">
                    <h4>Экстрасенс Z</h4>
                    <h4>@guessNumb[2]</h4>
                    <h4>Рейтинг: @rate[2]</h4>
                </div>
            </div>
            <h3>А теперь введите загаданное число</h3>

            <input style="@dis" type="number" min="10" max="99" maxlength="2" @bind="@numb" @onkeypress="TextInput" />
            <button class="btn-success" style="@dis" @onclick="RepNumb">Отправить</button>
            <button class="btn-success" style="@dis2" @onclick="Repeat">Загадать еще раз</button>
        </div>
        <div style="display: @hidden1;" class="block-1">
            <h2 class="text-center">История</h2>
            <table class="table table-striped">
                <thead class="table-success">
                    <tr>
                        <th>Экстрасенс X</th>
                        <th>Экстрасенс Y</th>
                        <th>Экстрасенс Z</th>
                        <th>Ваше число</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var h in history)
                    {
                        <tr>
                            <td>@h.e1</td>
                            <td>@h.e2</td>
                            <td>@h.e3</td>
                            <td>@h.uNumb</td>
                        </tr>

                    }

                </tbody>
            </table>
        </div>
    </div>
</div>


@code{




    @*List<History> historyBack = new List<History>();
        protected override async Task OnInitializedAsync()
        {

            historyBack = await iLocalStorage.GetItemAsync<List<History>>("history");
            history = historyBack;
        }

        private async void SaveSession()
        {

            await iLocalStorage.SetItemAsync<List<History>>("history", history);
            //await iLocalStorage.ClearAsync();
        }*@
Extrasens extX = new Extrasens();
string dis = "";
string dis2 = "display:none;";
string hidden = "";
string hidden1 = "none";
int numb = 10;
int x;
int[] rate = new int[3] { 50, 50, 50 };
int[] guessNumb = new int[6];
string[] status = new string[3];

List<History> history = new List<History>();



private void TextInput()
{
    var value = numb;
    if (value < 10)
    {
        numb = 10;
    }
    else if (value > 99)
    {
        numb = 99;
    }
    else
    {
        numb = value;
    }
}

private void RepMysе()
{

    for (int i = 0; i <= 2; i++)
    {
        guessNumb[i] = extX.AbraKadabra();
        status[i] = "";
    }
    hidden = "none";
    hidden1 = "";
}


private void RepNumb()
{
    if (numb >= 10 && numb <= 99)
    {
        int y = -1;
        x = 100;
        for (int i = 3; i <= 5; ++i)
        {
            guessNumb[i] = Math.Abs(numb - guessNumb[i - 3]);
            if (guessNumb[i] < x)
            {
                x = guessNumb[i];
                y++;
            }
        }

        switch (y)
        {
            case 0:
                rate[0] += 1;
                rate[1] -= 1;
                rate[2] -= 1;
                status[0] = "green";
                status[1] = "";
                status[2] = "";

                break;
            case 1:
                rate[0] -= 1;
                rate[1] += 1;
                rate[2] -= 1;
                status[0] = "";
                status[1] = "green";
                status[2] = "";
                break;
            case 2:
                rate[0] -= 1;
                rate[1] -= 1;
                rate[2] += 1;
                status[0] = "";
                status[1] = "";
                status[2] = "green";
                break;
        }
        dis = "display:none;";
        dis2 = "";

        history.Add(new History { e1 = guessNumb[0], e2 = guessNumb[1], e3 = guessNumb[2], uNumb = numb });
    }
    else if (numb > 99)
    {
        numb = 99;
    }
    else { numb = 10; }
    //SaveSession();
}

private void Repeat()
{
    RepMysе();
    numb = 10;
    dis = "";
    dis2 = "display:none;";

}
}

